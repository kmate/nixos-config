# Originally this was generated by ‘nixos-generate-config’, but split into more files already.
{
  config,
  lib,
  modulesPath,
  system,
  inputs,
  pkgs,
  ...
}: {
  imports = [
    (modulesPath + "/installer/scan/not-detected.nix")
    inputs.nixos-hardware.nixosModules.lenovo-thinkpad-t14-amd-gen4
  ];

  boot = {
    initrd = {
      availableKernelModules = ["nvme" "xhci_pci" "thunderbolt" "usb_storage" "sd_mod"];
      kernelModules = ["dm-snapshot"];
      luks.devices.root = {
        device = "/dev/disk/by-uuid/3ef61909-6b94-4c46-82bd-44e2880ca5f5";
        preLVM = true;
      };
      postDeviceCommands = lib.mkAfter ''
        mkdir /btrfs_tmp
        mount /dev/mapper/lvm-root /btrfs_tmp
        if [[ -e /btrfs_tmp/root ]]; then
            mkdir -p /btrfs_tmp/old_roots
            timestamp=$(date --date="@$(stat -c %Y /btrfs_tmp/root)" "+%Y-%m-%-d_%H:%M:%S")
            mv /btrfs_tmp/root "/btrfs_tmp/old_roots/$timestamp"
        fi

        delete_subvolume_recursively() {
            IFS=$'\n'
            for i in $(btrfs subvolume list -o "$1" | cut -f 9- -d ' '); do
                delete_subvolume_recursively "/btrfs_tmp/$i"
            done
            btrfs subvolume delete "$1"
        }

        for i in $(find /btrfs_tmp/old_roots/ -maxdepth 1 -mtime +7); do
            delete_subvolume_recursively "$i"
        done

        btrfs subvolume create /btrfs_tmp/root
        umount /btrfs_tmp
      '';
    };
    kernelModules = ["kvm-amd" "amdgpu"];
    kernelPackages = pkgs.linuxPackages_latest;
    extraModulePackages = [];
  };

  fileSystems = {
    "/" = {
      device = "/dev/disk/by-uuid/ab27b4ac-0e1e-4d71-975d-e3d4526eacd1";
      fsType = "btrfs";
      options = ["subvol=root" "compress=zstd" "noatime"];
    };
    "/home" = {
      device = "/dev/disk/by-uuid/ab27b4ac-0e1e-4d71-975d-e3d4526eacd1";
      fsType = "btrfs";
      options = ["subvol=home" "compress=zstd" "noatime"];
    };
    "/nix" = {
      device = "/dev/disk/by-uuid/ab27b4ac-0e1e-4d71-975d-e3d4526eacd1";
      fsType = "btrfs";
      options = ["subvol=nix" "compress=zstd" "noatime"];
    };
    "/persist" = {
      device = "/dev/disk/by-uuid/ab27b4ac-0e1e-4d71-975d-e3d4526eacd1";
      fsType = "btrfs";
      options = ["subvol=persist" "compress=zstd" "noatime"];
      neededForBoot = true;
    };
    "/var/log" = {
      device = "/dev/disk/by-uuid/ab27b4ac-0e1e-4d71-975d-e3d4526eacd1";
      fsType = "btrfs";
      options = ["subvol=log" "compress=zstd" "noatime"];
      neededForBoot = true;
    };
    "/boot" = {
      device = "/dev/disk/by-uuid/695C-D766";
      fsType = "vfat";
      # options = ["umask=077"]; # TODO this might be needed to make boot more secure
    };
  };

  swapDevices = [
    {device = "/dev/disk/by-uuid/cad09095-4592-4c83-9b7c-0f398906bb87";}
  ];

  nixpkgs.hostPlatform = lib.mkDefault system;

  hardware = {
    bluetooth.enable = true;
    cpu.amd.updateMicrocode = lib.mkDefault config.hardware.enableRedistributableFirmware;
    opengl = {
      enable = true;
      driSupport32Bit = true;
    };
    pulseaudio.enable = false;
  };

  security.rtkit.enable = true;

  sound.enable = true;

  services = {
    blueman = {
      enable = true;
    };

    pipewire = {
      enable = true;
      alsa.enable = true;
      alsa.support32Bit = true;
      pulse.enable = true;
    };

    tlp = {
      enable = true;
      settings = {
        CPU_SCALING_GOVERNOR_ON_AC = "performance";
        CPU_SCALING_GOVERNOR_ON_BAT = "powersave";

        CPU_ENERGY_PERF_POLICY_ON_BAT = "power";
        CPU_ENERGY_PERF_POLICY_ON_AC = "performance";

        CPU_MIN_PERF_ON_AC = 0;
        CPU_MAX_PERF_ON_AC = 100;
        CPU_MIN_PERF_ON_BAT = 0;
        CPU_MAX_PERF_ON_BAT = 30;

        # Optional helps save long term battery health
        # START_CHARGE_THRESH_BAT0 = 40; # 40 and bellow it starts to charge
        # STOP_CHARGE_THRESH_BAT0 = 80; # 80 and above it stops charging
      };
    };
  };
}
